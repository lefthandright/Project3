# Define constants
N_VALUE: .word 30
M_VALUE: .word 116   # ASCII value of 't'
MAX_INPUT_LENGTH: .word 1000

# Data section
.data
NA_MESSAGE: .asciiz "N/A"
NEWLINE: .asciiz "\n"
SEMICOLON: .asciiz ";"
N_0: .byte '0'

input_string: .space 1000

# Text segment
.text
.globl main

main:
  # Read string from user input
  li $v0, 8
  la $a0, input_string
  li $a1, 1000
  syscall

  # Pass address of string to Subprogram A
  la $a0, input_string
  jal subprogram_A

  # Exit program
  li $v0, 10
  syscall

# Subprogram A
subprogram_A:
  addi $sp, $sp, -4   # Allocate space for return address
  sw $ra, 0($sp)      # Save return address

  move $s0, $a0       # Save address of string
  move $t0, $a0       # Pointer to beginning of string

loop_A:
  lb $t1, 0($t0)     # Load byte from string
  beq $t1, 0, end_A  # If null terminator, end loop
  beq $t1, ';', process_substring  # If semicolon, process substring

  addi $t0, $t0, 1   # Move to next character
  j loop_A

process_substring:
  sub $a0, $t0, $s0  # Calculate length of substring
  add $a0, $a0, $t0  # Calculate address of substring

  jal subprogram_B   # Call Subprogram B
  move $s1, $v0      # Save return value

  li $v0, 1
  bge $s1, 2147483647, print_NA  # Check if return value is 231 - 1
  move $a0, $s1
  syscall

  la $a0, SEMICOLON
  li $v0, 4
  syscall

  addi $t0, $t0, 1   # Move to next character
  j loop_A

end_A:
  lw $ra, 0($sp)     # Restore return address
  addi $sp, $sp, 4   # Restore stack pointer
  jr $ra             # Return to caller

# Subprogram B
subprogram_B:
  addi $sp, $sp, -4   # Allocate space for return address
  sw $ra, 0($sp)      # Save return address

  move $s0, $a0       # Save address of substring
  move $t0, $a0       # Pointer to beginning of substring

  li $t2, 0           # Initialize sum of even digits
  li $t3, 0           # Initialize sum of odd digits

loop_B:
  lb $t1, 0($t0)     # Load byte from substring
  beq $t1, 0, end_B  # If null terminator, end loop

  lb $t4, N_0        # Load ASCII value of '0' into $t4
  bge $t1, $t4, is_digit  # Check if character is a digit
  j next_char        # If not a digit, move to next character

is_digit:
  sub $t1, $t1, $t4  # Calculate digit value

  andi $t5, $t0, 1   # Check if index is even
  beq $t5, $zero, add_to_odd
  add $t2, $t2, $t1  # Add to even sum
  j next_char
